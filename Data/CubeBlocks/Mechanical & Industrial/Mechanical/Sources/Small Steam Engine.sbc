<Definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Definition xsi:type="MyObjectBuilder_CubeBlockDefinition">
    <Id Type="CubeBlock" Subtype="Small_Steam_Engine" />
    <DisplayName>Small Steam Engine</DisplayName>
	<Description>Description_Block_WindmillMechanical</Description>
    <BlockPairName>Small_Steam_Engine</BlockPairName>
    <Public>true</Public>
    <Icon>Textures\GUI\Icons\Cubes\Mechanical\Mill.dds</Icon>
    <CubeSize>Large</CubeSize>
    <BlockTopology>TriangleMesh</BlockTopology>
    <Size x="1" y="1" z="1" />
    <ModelOffset x="0" y="0" z="0" />
    <Model>Models\Cubes\large\Mechanical\SawmillMechanical.mwm</Model>
    <BuildProgressModels>
      <Model BuildPercentUpperBound="0.5" File="Models\Cubes\large\Mechanical\SawmillMechanical_Construction_1.mwm">
        <!--<MountPointOverrides>
          <MountPoint Side="Top" Enabled="false" />
        </MountPointOverrides>-->
      </Model> 
    </BuildProgressModels>
    <Components>
      <Component Type="CubeBlock" Subtype="Timber10" Count="8" />
      <Component Type="CubeBlock" Subtype="TimberRound10" Count="1" />
      <Component Type="InventoryItem" Subtype="JarClayWithLinseedOil" Count="1" />
    </Components>
    <CriticalComponent Type="InventoryItem" Subtype="JarClayWithLinseedOil" Index="0" />
    <MaxIntegrity>600</MaxIntegrity>
    <MountPoints>
      <MountPoint Side="Bottom" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Top" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Left" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Right" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Back" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Front" StartX="1" StartY="1" EndX="0" EndY="0" />
    </MountPoints>
    <MirroringY>Z</MirroringY>
    <MirroringZ>Y</MirroringZ>
    <BuildTimeSeconds>6</BuildTimeSeconds>
    <PhysicalMaterial>Wood</PhysicalMaterial>
    <GuiVisible>true</GuiVisible>
    <Direction>Horizontal</Direction>
    <Rotation>Vertical</Rotation>
    <VoxelPlacement>
      <StaticMode>
        <PlacementMode>Both</PlacementMode>
        <MaxAllowed>1</MaxAllowed>
        <MinAllowed>0</MinAllowed>
      </StaticMode>
      <DynamicMode>
        <PlacementMode>InVoxel</PlacementMode>
        <MaxAllowed>1</MaxAllowed>
        <MinAllowed>0</MinAllowed>
      </DynamicMode>
    </VoxelPlacement>
	<!-- Disable compound building for the framed blocks; The unframed ones are designed for compounding. -->
	<CompoundEnabled>false</CompoundEnabled>
  </Definition>

  <Definition xsi:type="MyObjectBuilder_FueledMechanicalSourceComponentDefinition">
    <Id Type="FueledMechanicalSourceComponent" Subtype="Small_Steam_Engine" />
    <MaxPowerOutput>20</MaxPowerOutput>
    <Connection>connection_backward</Connection>
    <ClockwiseAnimation>cw</ClockwiseAnimation>
    <CounterClockwiseAnimation>ccw</CounterClockwiseAnimation>
  </Definition>

  <Definition xsi:type="MyObjectBuilder_CubeBlockSubpartComponentDefinition">
    <Id Type="CubeBlockSubpartComponent" Subtype="Small_Steam_Engine" />
	<ShowSubpartsWhileBuilding>false</ShowSubpartsWhileBuilding>
    <Subparts>
      <Subpart Name="SawbladeFrame" Model="Models\Cubes\large\Mechanical\SawmillMechanical_Arm.mwm" PhysicalMaterial="Wood" HingeBone="subpart_sawblades" RequiresAxialCorrection="true" HasDummy="false" HasPhysics="false" />
    </Subparts>
  </Definition>


  <Definition xsi:type="MyObjectBuilder_SubpartAnimationComponentDefinition">
    <Id Type="SubpartAnimationComponent" Subtype="Small_Steam_Engine" />
    <AnimationSequences>
      <Sequence Name="cw" WrapMode="Loop">
        <Animation Start="0" End="5">
          <Subpart Name="SawbladeFrame" Type="Rotation" Axis="Z" From="0" To="0" Method="Linear" />
        </Animation>
      </Sequence>
      <Sequence Name="ccw" WrapMode="Loop">
        <Animation Start="0" End="5">
          <Subpart Name="SawbladeFrame" Type="Rotation" Axis="Z" From="0" To="0" Method="Linear" />
        </Animation>
      </Sequence>
    </AnimationSequences>
  </Definition>
  
  <Definition xsi:type="MyObjectBuilder_EntityFXComponentDefinition">
    <Id Type="MyObjectBuilder_EntityFXComponent" Subtype="Small_Steam_Engine" />
    <Effects>

      <Effect StartEvent="IsPowered_connection_backward" StopEvent="NotPowered_connection_backward" Dummy="connection_backward">
        <EffectId Type="MyObjectBuilder_EffectDefinition" Subtype="MechanicalWorking"/>
      </Effect>
      <Effect StartEvent="NotWorking_connection_backward" StopEvent="Working_connection_backward" Dummy="connection_backward">
        <EffectId Type="MyObjectBuilder_EffectDefinition" Subtype="MechanicalGrinding"/>
      </Effect>

      <Effect StartEvent="FuelOn" StopEvent="FuelOff" Dummy="inventory">
        <EffectId Type="MyObjectBuilder_EffectDefinition" Subtype="Torch"/>
      </Effect>
    </Effects>
  </Definition>

<!-- =================== Fuel/Inventory =================== -->

  <Definition xsi:type="MyObjectBuilder_CraftingComponentQueuedDefinition">
    <Id Type="CraftingComponentQueued" Subtype="Small_Steam_Engine"/>
    <CraftingCategories>
      <Category></Category>
    </CraftingCategories>
    <ProductionQueueSize>4</ProductionQueueSize>
    <CraftingSpeedMultiplier>1</CraftingSpeedMultiplier>
    <CraftingInventory>ProcessingInventory</CraftingInventory>
    <ConstrainInventory>false</ConstrainInventory>
    <PowerRequired>All</PowerRequired>
  </Definition>

  <Definition xsi:type="MyObjectBuilder_EquiVoxelPowerComponentDefinition">
    <Id Type="MyObjectBuilder_EquiVoxelPowerComponent" Subtype="Steam_Engine" />
    <!-- radius, in meters, to scan -->
    <ScanRadius>2</ScanRadius>
    <!-- an additional radius that reduces the amount of spam a moving item will cause.  You can exclude this and use the default value. -->
    <ScanMargin>1</ScanMargin>
    <!-- Counting mode.  Surface makes the Amount material values ~Surface Area in m^2.  Volume makes the Amount material values in m^3 -->
    <Mode>Surface</Mode>
    <!-- When a change occurs nearby the component enters a "disturbed" mode until it has been this long since the last change -->
    <DisturbedTime Seconds="2"/>
    <!-- If this is false then the component is always unpowered when in the "disturbed" mode.  If true it just continues in its state before the disturbance -->
    <PoweredWhenDisturbed>false</PoweredWhenDisturbed>
    <!-- Query LoD.  Resolution = 2 ^ (LoD + 1) meters. -->
    <LevelOfDetail>1</LevelOfDetail>
    <!-- Print the counts and state transitions as messages.  Only useful for development, exclude (false) in published mods -->
    <DebugMode>false</DebugMode>
    <!-- AND = all requirements must be satisfied.  OR = any requirement must be satisfied -->
    <Operator>OR</Operator>
    <Materials>
      <!-- Amount is the comparison value in (m^2 or m^3) depending on Mode -->
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Grass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Dirt" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="DirtSteppe" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="PlantedSoil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="PlowedSoil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SandGrass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SandGrassGreen" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Soil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SteppeYellowGrass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods_grass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods_needles" Amount="10" />
      
      <!-- LessThan inverts the comparison, and gives true if there is less than the given amount -->
      <!-- <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Snow" Amount="1" LessThan="true" /> -->
    </Materials>
  </Definition>
<!-- =================== Container Definition =================== -->

  <Definition xsi:type="MyObjectBuilder_ContainerDefinition">
    <Id Type="CubeBlock" Subtype="Small_Steam_Engine" />
    <Component Type="FueledMechanicalSourceComponent" Subtype="Small_Steam_Engine" />
    <Component Type="Inventory" Subtype="Fuel" />
    <Component Type="FuelComponent" Subtype="Fire" />
    <!-- <Component Type="Inventory" Subtype="Fuel_Steam_Engine2" /> -->
    <!-- <Component Type="FuelComponent" Subtype="Fire_Steam_Engine2" /> -->
    <Component Type="EquiVoxelPowerComponent" Subtype="Steam_Engine" />
    
    <Component Type="Inventory" Subtype="ProcessingInventory" />
    <Component Type="CubeBlockSubpartComponent" Subtype="Small_Steam_Engine" />
    <Component Type="SubpartAnimationComponent" Subtype="Small_Steam_Engine" />
	  <Component Type="EntityFXComponent" Subtype="Small_Steam_Engine" />
    <Component Type="InventorySpawnComponent" />
    <Component Type="CraftingComponentQueued" Subtype="Small_Steam_Engine" />
  </Definition>
</Definitions>
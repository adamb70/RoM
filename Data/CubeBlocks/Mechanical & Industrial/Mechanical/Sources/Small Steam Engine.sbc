<Definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <Definition xsi:type="MyObjectBuilder_BuildableBlockDefinition">
    <Id Type="Block" Subtype="Small_Steam_Engine" />
    <Rotation>YAxis</Rotation>
    <DisplayName>Small Steam Engine</DisplayName>
    <Description>Description_Block_SawmillMechanical</Description>
    <Public>true</Public>
    <Icon>Textures\GUI\Icons\Cubes\Blocks\SawmillMechanical.dds</Icon>
    <GridDataDefinitionId Type="GridDataComponent" Subtype="LargeGridDataBase" />
    <Positions>
      <Position x="0" y="0" z="0" />
    </Positions>
    <Model>Models\Cubes\large\Mechanical\SawmillMechanical.mwm</Model>
    <BuildProgressModels>
      <Model UpperBound="0.5" File="Models\Cubes\large\Mechanical\SawmillMechanical_Construction_1.mwm" />
    </BuildProgressModels>
    <Components>
      <Component Tag="ScrapWood" Count="1" />
      <Component Type="Block" Subtype="Timber10" Count="8" />
      <Component Type="Block" Subtype="TimberRound10" Count="1" />
      <Component Tag="Plank" Count="8" />
      <Component Type="InventoryItem" Subtype="PartsMetal" Count="20" />
      <Component Type="InventoryItem" Subtype="JarClayWithLinseedOil" Count="1">
        <ReturnedItem Type="InventoryItem" Subtype="JarClay" />
      </Component>
    </Components>
    <MountPoints>
      <MountPoint Side="Bottom" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Top" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Left" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Right" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Back" StartX="1" StartY="1" EndX="0" EndY="0" />
      <MountPoint Side="Front" StartX="1" StartY="1" EndX="0" EndY="0" />
    </MountPoints>
    <PhysicalMaterial>WoodHeavy</PhysicalMaterial>
    <!-- Disable compound building for the framed blocks; The unframed ones are designed for compounding. -->
    <CompoundEnabled>false</CompoundEnabled>
    <UseModelIntersection>true</UseModelIntersection>
    <MaxIntegrity>1200</MaxIntegrity>
    <CriticalIntegrityRatio>0.9</CriticalIntegrityRatio>
  </Definition>


  <Definition xsi:type="MyObjectBuilder_FueledMechanicalSourceComponentDefinition">
    <Id Type="FueledMechanicalSourceComponent" Subtype="Small_Steam_Engine" />
    <MaxPowerOutput>20</MaxPowerOutput>
    <Connection>connection_backward</Connection>
    <ClockwiseAnimation>cw</ClockwiseAnimation>
    <CounterClockwiseAnimation>ccw</CounterClockwiseAnimation>
  </Definition>


  
  <Definition xsi:type="MyObjectBuilder_EquiVoxelPowerComponentDefinition">
    <Id Type="MyObjectBuilder_EquiVoxelPowerComponent" Subtype="Steam_Engine" />
    <!-- radius, in meters, to scan -->
    <ScanRadius>2</ScanRadius>
    <!-- an additional radius that reduces the amount of spam a moving item will cause.  You can exclude this and use the default value. -->
    <ScanMargin>1</ScanMargin>
    <!-- Counting mode.  Surface makes the Amount material values ~Surface Area in m^2.  Volume makes the Amount material values in m^3 -->
    <Mode>Surface</Mode>
    <!-- When a change occurs nearby the component enters a "disturbed" mode until it has been this long since the last change -->
    <DisturbedTime Seconds="2"/>
    <!-- If this is false then the component is always unpowered when in the "disturbed" mode.  If true it just continues in its state before the disturbance -->
    <PoweredWhenDisturbed>false</PoweredWhenDisturbed>
    <!-- Query LoD.  Resolution = 2 ^ (LoD + 1) meters. -->
    <LevelOfDetail>1</LevelOfDetail>
    <!-- Print the counts and state transitions as messages.  Only useful for development, exclude (false) in published mods -->
    <DebugMode>false</DebugMode>
    <!-- AND = all requirements must be satisfied.  OR = any requirement must be satisfied -->
    <Operator>OR</Operator>
    <Materials>
      <!-- Amount is the comparison value in (m^2 or m^3) depending on Mode -->
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Grass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Dirt" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="DirtSteppe" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="PlantedSoil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="PlowedSoil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SandGrass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SandGrassGreen" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Soil" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="SteppeYellowGrass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods_grass" Amount="10" />
      <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Woods_needles" Amount="10" />

      <!-- LessThan inverts the comparison, and gives true if there is less than the given amount -->
      <!-- <MaterialRequirement Type="MyObjectBuilder_VoxelMaterialDefinition" Subtype="Snow" Amount="1" LessThan="true" /> -->
    </Materials>
  </Definition>



  <Definition xsi:type="MyObjectBuilder_ContainerDefinition" Copy="Append">
    <Id Type="Block" Subtype="Small_Steam_Engine" />
    <CopyFrom Type="EntityBase" Subtype="BaseFatBlock" />

    <Component Type="FueledMechanicalSourceComponent" Subtype="Small_Steam_Engine" />
    <Component Type="EquiVoxelPowerComponent" Subtype="Steam_Engine" />

    <Component Type="ModelAttachmentComponent" Subtype="SawmillMechanical" />
    <Component Type="AttachmentAnimationComponent" Subtype="SawmillMechanical" />
    <Component Type="Inventory" Subtype="SawmillMechanicalToolheadInventory" />
    <Component Type="VisualInventoryComponent" Subtype="SawmillMechanicalVisualInventory" />

    <Component Type="Inventory" Subtype="SawmillMechanicalInventory" />
    <Component Type="Inventory" Subtype="SawmillMechanicalOutputInventory" />
    <Component Type="Inventory" Subtype="ProcessingInventory" />
    <Component Type="Inventory" Subtype="ProductInventory" />

    <Component Type="CraftingComponent" Subtype="SawmillMechanicalCrafting" />
    <Component Type="CraftingScheduler" Subtype="SawmillMechanicalScheduler" />
    <Component Type="ToolBasedRecipeProviderComponent" Subtype="SawmillMechanicalRecipes" />

    <Component Type="InventorySpawnComponent" Subtype="ProductionSpawner" />
    <Component Type="MyObjectBuilder_EntityFXComponent" Subtype="SawmillMechanicalFx" />
  </Definition>
</Definitions>